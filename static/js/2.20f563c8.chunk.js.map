{"version":3,"sources":["components/FormComponents/index.tsx","assets/logo.svg","util/validators.tsx","components/DialogComponent/index.tsx"],"names":["FormInput","fieldRenderProps","validationMessage","touched","label","id","valid","disabled","hint","type","optional","others","showValidationMessage","showHint","hintId","errorId","editorId","editorValid","editorDisabled","className","ariaDescribedBy","emailRegex","RegExp","phoneRegex","emailValidator","value","test","passwordValidator","length","phoneValidator","nameValidator","DialogComponent","props","title","handleClose","body","onClose","style","margin","textAlign"],"mappings":"2MAkCaA,EAAY,SAACC,GAA2B,IAEjDC,EAUED,EAVFC,kBACAC,EASEF,EATFE,QACAC,EAQEH,EARFG,MACAC,EAOEJ,EAPFI,GACAC,EAMEL,EANFK,MACAC,EAKEN,EALFM,SACAC,EAIEP,EAJFO,KACAC,EAGER,EAHFQ,KACAC,EAEET,EAFFS,SACGC,EAX6C,YAY9CV,EAZ8C,0FAc5CW,EAAwBT,GAAWD,EACnCW,GAAYD,GAAyBJ,EACrCM,EAASD,EAAQ,UAAMR,EAAN,SAAkB,GACnCU,EAAUH,EAAqB,UAAMP,EAAN,UAAmB,GAExD,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEW,SAAUX,EACVY,YAAaX,EACbY,eAAgBX,EAChBG,SAAUA,EAJZ,SAMGN,IAEH,sBAAKe,UAAW,oBAAhB,UACE,cAAC,IAAD,aACEb,MAAOA,EACPG,KAAMA,EACNJ,GAAIA,EACJE,SAAUA,EACVa,gBAAe,UAAKN,EAAL,YAAeC,IAC1BJ,IAELE,GAAY,cAAC,IAAD,CAAMR,GAAIS,EAAV,SAAmBN,IAC/BI,GACC,cAAC,IAAD,CAAOP,GAAIU,EAAX,SAAqBb,Y,gCC1EhB,QAA0B,kC,gCCAzC,4IAAMmB,EAAa,IAAIC,OAAO,gBACxBC,EAAa,IAAID,OAAO,iBAEjBE,EAAiB,SAACC,GAAD,OAC3BA,EAEGJ,EAAWK,KAAKD,GAChB,GACA,kCAHA,4BAKOE,EAAoB,SAACF,GAAD,OAC9BA,EAEGA,EAAMG,OAAS,EACf,wCACA,GAHA,+BAKOC,EAAiB,SAACJ,GAAD,OAC3BA,EAEGF,EAAWG,KAAKD,GAChB,GACA,4BAHA,6BAKOK,EAAgB,SAACL,GAAD,OAC1BA,EAEGA,EAAMG,OAAS,EACf,kDACA,GAHA,0B,gCC1BN,mBAoBeG,IAZ0C,SACvDC,GACI,IACIC,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KAE5B,OACE,cAAC,IAAD,CAAQF,MAAOA,EAAOG,QAASF,EAA/B,SACE,mBAAGG,MAAO,CAAEC,OAAQ,OAAQC,UAAW,UAAvC,SAAoDJ","file":"static/js/2.20f563c8.chunk.js","sourcesContent":["import * as React from \"react\";\n\nimport { FieldWrapper } from \"@progress/kendo-react-form\";\nimport {\n  Input,\n  // MaskedTextBox,\n  // NumericTextBox,\n  // Checkbox,\n  // ColorPicker,\n  // Switch,\n  // RadioGroup,\n  // Slider,\n  // SliderLabel,\n  // RangeSlider,\n  // TextArea,\n  // Rating,\n} from \"@progress/kendo-react-inputs\";\n// import {\n//   DatePicker,\n//   TimePicker,\n//   DateTimePicker,\n//   DateRangePicker,\n//   DateInput,\n// } from \"@progress/kendo-react-dateinputs\";\nimport {\n  Label,\n  Error,\n  Hint,\n  // FloatingLabel,\n} from \"@progress/kendo-react-labels\";\n// import { Upload } from '@progress/kendo-react-upload';\n// import { DropDownList, AutoComplete, MultiSelect, ComboBox, MultiColumnComboBox, DropDownTree } from '@progress/kendo-react-dropdowns';\n// import { processTreeData, expandedState} from './tree-data-operations';\n\nexport const FormInput = (fieldRenderProps: any) => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    type,\n    optional,\n    ...others\n  } = fieldRenderProps;\n\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : \"\";\n  const errorId = showValidationMessage ? `${id}_error` : \"\";\n\n  return (\n    <FieldWrapper>\n      <Label\n        editorId={id}\n        editorValid={valid}\n        editorDisabled={disabled}\n        optional={optional}\n      >\n        {label}\n      </Label>\n      <div className={\"k-form-field-wrap\"}>\n        <Input\n          valid={valid}\n          type={type}\n          id={id}\n          disabled={disabled}\n          ariaDescribedBy={`${hintId} ${errorId}`}\n          {...others}\n        />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && (\n          <Error id={errorId}>{validationMessage}</Error>\n        )}\n      </div>\n    </FieldWrapper>\n  );\n};\n\n// export const FormRadioGroup = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     id,\n//     label,\n//     valid,\n//     disabled,\n//     hint,\n//     visited,\n//     modified,\n//     ...others\n//   } = fieldRenderProps;\n//   const editorRef = React.useRef(null);\n\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n//   const labelId = label ? `${id}_label` : \"\";\n\n//   return (\n//     <FieldWrapper>\n//       <Label\n//         id={labelId}\n//         editorRef={editorRef}\n//         editorId={id}\n//         editorValid={valid}\n//         editorDisabled={disabled}\n//       >\n//         {label}\n//       </Label>\n//       <RadioGroup\n//         id={id}\n//         ariaDescribedBy={`${hintId} ${errorId}`}\n//         ariaLabelledBy={labelId}\n//         valid={valid}\n//         disabled={disabled}\n//         ref={editorRef}\n//         {...others}\n//       />\n//       {showHint && <Hint id={hintId}>{hint}</Hint>}\n//       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n//     </FieldWrapper>\n//   );\n// };\n\n// export const FormNumericTextBox = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     label,\n//     id,\n//     valid,\n//     disabled,\n//     hint,\n//     ...others\n//   } = fieldRenderProps;\n\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n\n//   return (\n//     <FieldWrapper>\n//       <Label editorId={id} editorValid={valid} editorDisabled={disabled}>\n//         {label}\n//       </Label>\n//       <NumericTextBox\n//         ariaDescribedBy={`${hintId} ${errorId}`}\n//         valid={valid}\n//         id={id}\n//         disabled={disabled}\n//         {...others}\n//       />\n//       {showHint && <Hint id={hintId}>{hint}</Hint>}\n//       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n//     </FieldWrapper>\n//   );\n// };\n\n// export const FormCheckbox = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     id,\n//     valid,\n//     disabled,\n//     hint,\n//     optional,\n//     label,\n//     visited,\n//     modified,\n//     ...others\n//   } = fieldRenderProps;\n\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n\n//   return (\n//     <FieldWrapper>\n//       <Checkbox\n//         ariaDescribedBy={`${hintId} ${errorId}`}\n//         label={label}\n//         labelOptional={optional}\n//         valid={valid}\n//         id={id}\n//         disabled={disabled}\n//         {...others}\n//       />\n//       {showHint && <Hint id={hintId}>{hint}</Hint>}\n//       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n//     </FieldWrapper>\n//   );\n// };\n\n// export const FormSwitch = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     label,\n//     optional,\n//     id,\n//     valid,\n//     disabled,\n//     hint,\n//     ...others\n//   } = fieldRenderProps;\n//   const editorRef = React.useRef(null);\n\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n//   const labelId = label ? `${id}_label` : \"\";\n\n//   return (\n//     <FieldWrapper>\n//       <Label\n//         id={labelId}\n//         editorRef={editorRef}\n//         editorId={id}\n//         editorValid={valid}\n//         editorDisabled={disabled}\n//         optional={optional}\n//       >\n//         {label}\n//       </Label>\n//       <Switch\n//         ref={editorRef}\n//         ariaLabelledBy={labelId}\n//         ariaDescribedBy={`${hintId} ${errorId}`}\n//         valid={valid}\n//         id={id}\n//         disabled={disabled}\n//         {...others}\n//       />\n//       {showHint && <Hint id={hintId}>{hint}</Hint>}\n//       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n//     </FieldWrapper>\n//   );\n// };\n\n// export const FormMaskedTextBox = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     label,\n//     id,\n//     valid,\n//     hint,\n//     optional,\n//     ...others\n//   } = fieldRenderProps;\n\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n\n//   return (\n//     <FieldWrapper>\n//       <Label editorId={id} editorValid={valid} optional={optional}>\n//         {label}\n//       </Label>\n//       <div className={\"k-form-field-wrap\"}>\n//         <MaskedTextBox\n//           ariaDescribedBy={`${hintId} ${errorId}`}\n//           valid={valid}\n//           id={id}\n//           {...others}\n//         />\n//         {showHint && <Hint id={hintId}>{hint}</Hint>}\n//         {showValidationMessage && (\n//           <Error id={errorId}>{validationMessage}</Error>\n//         )}\n//       </div>\n//     </FieldWrapper>\n//   );\n// };\n\n// export const FormTextArea = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     label,\n//     id,\n//     valid,\n//     hint,\n//     disabled,\n//     optional,\n//     ...others\n//   } = fieldRenderProps;\n\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n\n//   return (\n//     <FieldWrapper>\n//       <Label editorId={id} editorValid={valid} optional={optional}>\n//         {label}\n//       </Label>\n//       <TextArea\n//         valid={valid}\n//         id={id}\n//         disabled={disabled}\n//         ariaDescribedBy={`${hintId} ${errorId}`}\n//         {...others}\n//       />\n//       {showHint && <Hint id={hintId}>{hint}</Hint>}\n//       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n//     </FieldWrapper>\n//   );\n// };\n\n// export const FormColorPicker = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     label,\n//     id,\n//     valid,\n//     disabled,\n//     hint,\n//     wrapperStyle,\n//     ...others\n//   } = fieldRenderProps;\n//   const editorRef = React.useRef(null);\n\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n//   const labelId = label ? `${id}_label` : \"\";\n\n//   return (\n//     <FieldWrapper style={wrapperStyle}>\n//       <Label\n//         id={labelId}\n//         editorRef={editorRef}\n//         editorId={id}\n//         editorValid={valid}\n//         editorDisabled={disabled}\n//       >\n//         {label}\n//       </Label>\n//       <ColorPicker\n//         ariaLabelledBy={labelId}\n//         ariaDescribedBy={`${hintId} ${errorId}`}\n//         ref={editorRef}\n//         valid={valid}\n//         id={id}\n//         disabled={disabled}\n//         {...others}\n//       />\n//       {showHint && <Hint id={hintId}>{hint}</Hint>}\n//       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n//     </FieldWrapper>\n//   );\n// };\n\n// export const FormSlider = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     label,\n//     id,\n//     valid,\n//     disabled,\n//     hint,\n//     data,\n//     ...others\n//   } = fieldRenderProps;\n\n//   const editorRef = React.useRef(null);\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n//   const labelId = label ? `${id}_label` : \"\";\n\n//   return (\n//     <FieldWrapper>\n//       <Label\n//         id={labelId}\n//         editorRef={editorRef}\n//         editorId={id}\n//         editorValid={valid}\n//         editorDisabled={disabled}\n//       >\n//         {label}\n//       </Label>\n//       <Slider\n//         ariaLabelledBy={labelId}\n//         ariaDescribedBy={`${hintId} ${errorId}`}\n//         ref={editorRef}\n//         valid={valid}\n//         id={id}\n//         disabled={disabled}\n//         {...others}\n//       >\n//         {data.map((value: any) => (\n//           <SliderLabel title={value} key={value} position={value}>\n//             {value.toString()}\n//           </SliderLabel>\n//         ))}\n//       </Slider>\n//       {showHint && <Hint id={hintId}>{hint}</Hint>}\n//       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n//     </FieldWrapper>\n//   );\n// };\n\n// export const FormRangeSlider = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     label,\n//     id,\n//     valid,\n//     hint,\n//     disabled,\n//     data,\n//     ...others\n//   } = fieldRenderProps;\n\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n\n//   return (\n//     <FieldWrapper>\n//       <Label editorId={id} editorValid={valid}>\n//         {label}\n//       </Label>\n//       <RangeSlider\n//         valid={valid}\n//         id={id}\n//         disabled={disabled}\n//         ariaDescribedBy={`${hintId} ${errorId}`}\n//         {...others}\n//       >\n//         {data.map((value: any) => {\n//           return (\n//             <SliderLabel key={value} position={value}>\n//               {value.toString()}\n//             </SliderLabel>\n//           );\n//         })}\n//       </RangeSlider>\n//       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n//     </FieldWrapper>\n//   );\n// };\n\n// export const FormRating = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     label,\n//     id,\n//     valid,\n//     hint,\n//     disabled,\n//     optional,\n//     ...others\n//   } = fieldRenderProps;\n\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n\n//   return (\n//     <FieldWrapper>\n//       <Label editorId={id} editorValid={valid} optional={optional}>\n//         {label}\n//       </Label>\n//       <Rating\n//         valid={valid}\n//         id={id}\n//         disabled={disabled}\n//         ariaDescribedBy={`${hintId} ${errorId}`}\n//         {...others}\n//       />\n//       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n//     </FieldWrapper>\n//   );\n// };\n\n// // export const FormUpload = (fieldRenderProps: any) => {\n// //   const {\n// //     valid,\n// //     value,\n// //     id,\n// //     optional,\n// //     label,\n// //     hint,\n// //     validationMessage,\n// //     touched,\n// //     ...others\n// //   } = fieldRenderProps;\n\n// //   const showValidationMessage = touched && validationMessage;\n// //   const showHint = !showValidationMessage && hint;\n// //   const hintId = showHint ? `${id}_hint` : \"\";\n// //   const errorId = showValidationMessage ? `${id}_error` : \"\";\n// //   const labelId = label ? `${id}_label` : \"\";\n\n// //   const onChangeHandler = (event) => {\n// //     fieldRenderProps.onChange({ value: event.newState });\n// //   };\n// //   const onRemoveHandler = (event) => {\n// //     fieldRenderProps.onChange({ value: event.newState });\n// //   };\n\n// //   return (\n// //     <FieldWrapper>\n// //       <Label id={labelId} editorId={id} editorValid={valid} optional={optional}>\n// //         {label}\n// //       </Label>\n// //       <Upload\n// //         id={id}\n// //         valid={valid}\n// //         autoUpload={false}\n// //         showActionButtons={false}\n// //         multiple={false}\n// //         files={value}\n// //         onAdd={onChangeHandler}\n// //         onRemove={onRemoveHandler}\n// //         ariaDescribedBy={`${hintId} ${errorId}`}\n// //         ariaLabelledBy={labelId}\n// //         {...others}\n// //       />\n// //       {showHint && <Hint id={hintId}>{hint}</Hint>}\n// //       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n// //     </FieldWrapper>\n// //   );\n// // };\n\n// // export const FormDropDownList = (fieldRenderProps: any) => {\n// //   const {\n// //     validationMessage,\n// //     touched,\n// //     label,\n// //     id,\n// //     valid,\n// //     disabled,\n// //     hint,\n// //     wrapperStyle,\n// //     ...others\n// //   } = fieldRenderProps;\n// //   const editorRef = React.useRef(null);\n\n// //   const showValidationMessage = touched && validationMessage;\n// //   const showHint = !showValidationMessage && hint;\n// //   const hintId = showHint ? `${id}_hint` : \"\";\n// //   const errorId = showValidationMessage ? `${id}_error` : \"\";\n// //   const labelId = label ? `${id}_label` : \"\";\n\n// //   return (\n// //     <FieldWrapper style={wrapperStyle}>\n// //       <Label\n// //         id={labelId}\n// //         editorRef={editorRef}\n// //         editorId={id}\n// //         editorValid={valid}\n// //         editorDisabled={disabled}\n// //       >\n// //         {label}\n// //       </Label>\n// //       <DropDownList\n// //         ariaLabelledBy={labelId}\n// //         ariaDescribedBy={`${hintId} ${errorId}`}\n// //         ref={editorRef}\n// //         valid={valid}\n// //         id={id}\n// //         disabled={disabled}\n// //         {...others}\n// //       />\n// //       {showHint && <Hint id={hintId}>{hint}</Hint>}\n// //       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n// //     </FieldWrapper>\n// //   );\n// // };\n\n// // export const FormAutoComplete = (fieldRenderProps: any) => {\n// //   const {\n// //     validationMessage,\n// //     touched,\n// //     label,\n// //     id,\n// //     valid,\n// //     disabled,\n// //     hint,\n// //     wrapperStyle,\n// //     ...others\n// //   } = fieldRenderProps;\n// //   const editorRef = React.useRef(null);\n\n// //   const showValidationMessage = touched && validationMessage;\n// //   const showHint = !showValidationMessage && hint;\n// //   const hintId = showHint ? `${id}_hint` : \"\";\n// //   const errorId = showValidationMessage ? `${id}_error` : \"\";\n// //   const labelId = label ? `${id}_label` : \"\";\n\n// //   return (\n// //     <FieldWrapper style={wrapperStyle}>\n// //       <Label\n// //         id={labelId}\n// //         editorRef={editorRef}\n// //         editorId={id}\n// //         editorValid={valid}\n// //         editorDisabled={disabled}\n// //       >\n// //         {label}\n// //       </Label>\n// //       <AutoComplete\n// //         ariaLabelledBy={labelId}\n// //         ariaDescribedBy={`${hintId} ${errorId}`}\n// //         ref={editorRef}\n// //         valid={valid}\n// //         id={id}\n// //         disabled={disabled}\n// //         {...others}\n// //       />\n// //       {showHint && <Hint id={hintId}>{hint}</Hint>}\n// //       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n// //     </FieldWrapper>\n// //   );\n// // };\n\n// // export const FormComboBox = (fieldRenderProps: any) => {\n// //   const {\n// //     validationMessage,\n// //     touched,\n// //     label,\n// //     id,\n// //     valid,\n// //     disabled,\n// //     hint,\n// //     wrapperStyle,\n// //     ...others\n// //   } = fieldRenderProps;\n// //   const editorRef = React.useRef(null);\n\n// //   const showValidationMessage = touched && validationMessage;\n// //   const showHint = !showValidationMessage && hint;\n// //   const hintId = showHint ? `${id}_hint` : \"\";\n// //   const errorId = showValidationMessage ? `${id}_error` : \"\";\n// //   const labelId = label ? `${id}_label` : \"\";\n\n// //   return (\n// //     <FieldWrapper style={wrapperStyle}>\n// //       <Label\n// //         id={labelId}\n// //         editorRef={editorRef}\n// //         editorId={id}\n// //         editorValid={valid}\n// //         editorDisabled={disabled}\n// //       >\n// //         {label}\n// //       </Label>\n// //       <ComboBox\n// //         ariaLabelledBy={labelId}\n// //         ariaDescribedBy={`${hintId} ${errorId}`}\n// //         ref={editorRef}\n// //         valid={valid}\n// //         id={id}\n// //         disabled={disabled}\n// //         {...others}\n// //       />\n// //       {showHint && <Hint id={hintId}>{hint}</Hint>}\n// //       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n// //     </FieldWrapper>\n// //   );\n// // };\n\n// // export const FormMultiColumnComboBox = (fieldRenderProps: any) => {\n// //   const {\n// //     validationMessage,\n// //     touched,\n// //     label,\n// //     id,\n// //     valid,\n// //     disabled,\n// //     hint,\n// //     wrapperStyle,\n// //     ...others\n// //   } = fieldRenderProps;\n// //   const editorRef = React.useRef(null);\n\n// //   const showValidationMessage = touched && validationMessage;\n// //   const showHint = !showValidationMessage && hint;\n// //   const hintId = showHint ? `${id}_hint` : \"\";\n// //   const errorId = showValidationMessage ? `${id}_error` : \"\";\n// //   const labelId = label ? `${id}_label` : \"\";\n\n// //   const columns = [\n// //     { field: \"id\", header: <span>header</span>, width: \"100px\" },\n// //     { field: \"name\", header: \"Name\", width: \"300px\" },\n// //     { field: \"position\", header: \"Position\", width: \"300px\" },\n// //   ];\n\n// //   return (\n// //     <FieldWrapper style={wrapperStyle}>\n// //       <Label\n// //         id={labelId}\n// //         editorRef={editorRef}\n// //         editorId={id}\n// //         editorValid={valid}\n// //         editorDisabled={disabled}\n// //       >\n// //         {label}\n// //       </Label>\n// //       <MultiColumnComboBox\n// //         ariaLabelledBy={labelId}\n// //         ariaDescribedBy={`${hintId} ${errorId}`}\n// //         ref={editorRef}\n// //         valid={valid}\n// //         id={id}\n// //         disabled={disabled}\n// //         columns={columns}\n// //         textField={\"name\"}\n// //         {...others}\n// //       />\n// //       {showHint && <Hint id={hintId}>{hint}</Hint>}\n// //       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n// //     </FieldWrapper>\n// //   );\n// // };\n\n// // export const FormMultiSelect = (fieldRenderProps: any) => {\n// //   const {\n// //     validationMessage,\n// //     touched,\n// //     label,\n// //     id,\n// //     valid,\n// //     disabled,\n// //     hint,\n// //     wrapperStyle,\n// //     ...others\n// //   } = fieldRenderProps;\n// //   const editorRef = React.useRef(null);\n// //   const showValidationMessage = touched && validationMessage;\n// //   const showHint = !showValidationMessage && hint;\n// //   const hintId = showHint ? `${id}_hint` : \"\";\n// //   const errorId = showValidationMessage ? `${id}_error` : \"\";\n// //   const labelId = label ? `${id}_label` : \"\";\n\n// //   return (\n// //     <FieldWrapper style={wrapperStyle}>\n// //       <Label\n// //         id={labelId}\n// //         editorRef={editorRef}\n// //         editorId={id}\n// //         editorValid={valid}\n// //         editorDisabled={disabled}\n// //       >\n// //         {label}\n// //       </Label>\n// //       <MultiSelect\n// //         ariaLabelledBy={labelId}\n// //         ariaDescribedBy={`${hintId} ${errorId}`}\n// //         ref={editorRef}\n// //         valid={valid}\n// //         id={id}\n// //         disabled={disabled}\n// //         {...others}\n// //       />\n// //       {showHint && <Hint id={hintId}>{hint}</Hint>}\n// //       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n// //     </FieldWrapper>\n// //   );\n// // };\n\n// // export const FormDropDownTree = (fieldRenderProps: any) => {\n// //   const {\n// //     validationMessage,\n// //     touched,\n// //     label,\n// //     id,\n// //     valid,\n// //     disabled,\n// //     hint,\n// //     wrapperStyle,\n// //     data,\n// //     ...others\n// //   } = fieldRenderProps;\n// //   const { value, selectField, expandField, dataItemKey } = others;\n// //   const [expanded, setExpanded] = React.useState([data[0][dataItemKey]]);\n// //   const treeData = React.useMemo(\n// //     () =>\n// //       processTreeData(\n// //         data,\n// //         { expanded, value },\n// //         { selectField, expandField, dataItemKey, subItemsField: \"items\" }\n// //       ),\n// //     [expanded, value, selectField, expandField, dataItemKey]\n// //   );\n// //   const onExpandChange = React.useCallback(\n// //     (event) => setExpanded(expandedState(event.item, dataItemKey, expanded)),\n// //     [expanded, dataItemKey]\n// //   );\n// //   const editorRef = React.useRef(null);\n// //   const showValidationMessage = touched && validationMessage;\n// //   const showHint = !showValidationMessage && hint;\n// //   const hintId = showHint ? `${id}_hint` : \"\";\n// //   const errorId = showValidationMessage ? `${id}_error` : \"\";\n// //   const labelId = label ? `${id}_label` : \"\";\n\n// //   return (\n// //     <FieldWrapper style={wrapperStyle}>\n// //       <Label\n// //         id={labelId}\n// //         editorRef={editorRef}\n// //         editorId={id}\n// //         editorValid={valid}\n// //         editorDisabled={disabled}\n// //       >\n// //         {label}\n// //       </Label>\n// //       <DropDownTree\n// //         ariaLabelledBy={labelId}\n// //         ariaDescribedBy={`${hintId} ${errorId}`}\n// //         ref={editorRef}\n// //         valid={valid}\n// //         id={id}\n// //         disabled={disabled}\n// //         data={treeData}\n// //         onExpandChange={onExpandChange}\n// //         {...others}\n// //       />\n// //       {showHint && <Hint id={hintId}>{hint}</Hint>}\n// //       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n// //     </FieldWrapper>\n// //   );\n// // };\n\n// export const FormDatePicker = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     label,\n//     id,\n//     valid,\n//     disabled,\n//     hint,\n//     wrapperStyle,\n//     hintDirection,\n//     ...others\n//   } = fieldRenderProps;\n\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n//   const labelId = label ? `${id}_label` : \"\";\n\n//   return (\n//     <FieldWrapper style={wrapperStyle}>\n//       <Label\n//         id={labelId}\n//         editorId={id}\n//         editorValid={valid}\n//         editorDisabled={disabled}\n//       >\n//         {label}\n//       </Label>\n//       <div className={\"k-form-field-wrap\"}>\n//         <DatePicker\n//           ariaLabelledBy={labelId}\n//           ariaDescribedBy={`${hintId} ${errorId}`}\n//           valid={valid}\n//           id={id}\n//           disabled={disabled}\n//           {...others}\n//         />\n//         {showHint && (\n//           <Hint id={hintId} direction={hintDirection}>\n//             {hint}\n//           </Hint>\n//         )}\n//         {showValidationMessage && (\n//           <Error id={errorId}>{validationMessage}</Error>\n//         )}\n//       </div>\n//     </FieldWrapper>\n//   );\n// };\n\n// export const FormDateTimePicker = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     label,\n//     id,\n//     valid,\n//     disabled,\n//     hint,\n//     wrapperStyle,\n//     ...others\n//   } = fieldRenderProps;\n\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n//   const labelId = label ? `${id}_label` : \"\";\n\n//   return (\n//     <FieldWrapper style={wrapperStyle}>\n//       <Label\n//         id={labelId}\n//         editorId={id}\n//         editorValid={valid}\n//         editorDisabled={disabled}\n//       >\n//         {label}\n//       </Label>\n//       <DateTimePicker\n//         ariaLabelledBy={labelId}\n//         ariaDescribedBy={`${hintId} ${errorId}`}\n//         valid={valid}\n//         id={id}\n//         disabled={disabled}\n//         {...others}\n//       />\n//       {showHint && <Hint id={hintId}>{hint}</Hint>}\n//       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n//     </FieldWrapper>\n//   );\n// };\n\n// export const FormTimePicker = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     label,\n//     id,\n//     valid,\n//     disabled,\n//     hint,\n//     wrapperStyle,\n//     ...others\n//   } = fieldRenderProps;\n\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n//   const labelId = label ? `${id}_label` : \"\";\n\n//   return (\n//     <FieldWrapper style={wrapperStyle}>\n//       <Label\n//         id={labelId}\n//         editorId={id}\n//         editorValid={valid}\n//         editorDisabled={disabled}\n//       >\n//         {label}\n//       </Label>\n//       <TimePicker\n//         ariaLabelledBy={labelId}\n//         ariaDescribedBy={`${hintId} ${errorId}`}\n//         valid={valid}\n//         id={id}\n//         disabled={disabled}\n//         {...others}\n//       />\n//       {showHint && <Hint id={hintId}>{hint}</Hint>}\n//       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n//     </FieldWrapper>\n//   );\n// };\n\n// export const FormDateInput = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     label,\n//     id,\n//     valid,\n//     disabled,\n//     hint,\n//     wrapperStyle,\n//     ...others\n//   } = fieldRenderProps;\n\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n//   const labelId = label ? `${id}_label` : \"\";\n\n//   return (\n//     <FieldWrapper style={wrapperStyle}>\n//       <Label\n//         id={labelId}\n//         editorId={id}\n//         editorValid={valid}\n//         editorDisabled={disabled}\n//       >\n//         {label}\n//       </Label>\n//       <DateInput\n//         ariaLabelledBy={labelId}\n//         ariaDescribedBy={`${hintId} ${errorId}`}\n//         valid={valid}\n//         id={id}\n//         disabled={disabled}\n//         {...others}\n//       />\n//       {showHint && <Hint id={hintId}>{hint}</Hint>}\n//       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n//     </FieldWrapper>\n//   );\n// };\n\n// export const FormDateRangePicker = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     label,\n//     id,\n//     valid,\n//     disabled,\n//     hint,\n//     wrapperStyle,\n//     ...others\n//   } = fieldRenderProps;\n//   const editorRef = React.useRef(null);\n\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n//   const labelId = label ? `${id}_label` : \"\";\n\n//   return (\n//     <FieldWrapper style={wrapperStyle}>\n//       <Label\n//         id={labelId}\n//         editorRef={editorRef}\n//         editorId={id}\n//         editorValid={valid}\n//         editorDisabled={disabled}\n//       >\n//         {label}\n//       </Label>\n//       <DateRangePicker\n//         ariaLabelledBy={labelId}\n//         ariaDescribedBy={`${hintId} ${errorId}`}\n//         ref={editorRef}\n//         valid={valid}\n//         id={id}\n//         disabled={disabled}\n//         {...others}\n//       />\n//       {showHint && <Hint id={hintId}>{hint}</Hint>}\n//       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n//     </FieldWrapper>\n//   );\n// };\n\n// export const FormFloatingNumericTextBox = (fieldRenderProps: any) => {\n//   const {\n//     validationMessage,\n//     touched,\n//     label,\n//     id,\n//     valid,\n//     disabled,\n//     hint,\n//     optional,\n//     value,\n//     ...others\n//   } = fieldRenderProps;\n\n//   const showValidationMessage = touched && validationMessage;\n//   const showHint = !showValidationMessage && hint;\n//   const hintId = showHint ? `${id}_hint` : \"\";\n//   const errorId = showValidationMessage ? `${id}_error` : \"\";\n\n//   return (\n//     <FieldWrapper>\n//       <FloatingLabel\n//         optional={optional}\n//         editorValue={value}\n//         editorId={id}\n//         editorValid={valid}\n//         editorDisabled={disabled}\n//         label={label}\n//       >\n//         <NumericTextBox\n//           ariaDescribedBy={`${hintId} ${errorId}`}\n//           value={value}\n//           valid={valid}\n//           id={id}\n//           disabled={disabled}\n//           {...others}\n//         />\n//       </FloatingLabel>\n//       {showHint && <Hint id={hintId}>{hint}</Hint>}\n//       {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n//     </FieldWrapper>\n//   );\n// };\n","export default __webpack_public_path__ + \"static/media/logo.c5db93c4.svg\";","const emailRegex = new RegExp(/\\S+@\\S+\\.\\S+/);\nconst phoneRegex = new RegExp(/^[0-9 ()+-]+$/);\n\nexport const emailValidator = (value: string) =>\n  !value\n    ? \"Email field is required.\"\n    : emailRegex.test(value)\n    ? \"\"\n    : \"Email is not in a valid format.\";\n\nexport const passwordValidator = (value: string) =>\n  !value\n    ? \"Password field is required.\"\n    : value.length < 6\n    ? \"Password must be at least 6 character\"\n    : \"\";\n\nexport const phoneValidator = (value: string) =>\n  !value\n    ? \"Phone number is required.\"\n    : phoneRegex.test(value)\n    ? \"\"\n    : \"Not a valid phone number.\";\n\nexport const nameValidator = (value: string) =>\n  !value\n    ? \"Full Name is required\"\n    : value.length < 3\n    ? \"Full Name should be at least 3 characters long.\"\n    : \"\";\n","import { Dialog } from \"@progress/kendo-react-dialogs\";\n\nexport interface IDialogComponentProps {\n  title: string;\n  handleClose: () => void;\n  body: string;\n}\n\nconst DialogComponent: React.FC<IDialogComponentProps> = (\n  props: IDialogComponentProps\n) => {\n  const { title, handleClose, body } = props;\n\n  return (\n    <Dialog title={title} onClose={handleClose}>\n      <p style={{ margin: \"25px\", textAlign: \"center\" }}>{body}</p>\n    </Dialog>\n  );\n};\n\nexport default DialogComponent;\n"],"sourceRoot":""}